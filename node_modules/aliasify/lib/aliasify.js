// Generated by CoffeeScript 1.9.1
(function() {
  var getReplacement, path, transformTools;

  path = require('path');

  transformTools = require('browserify-transform-tools');

  getReplacement = function(file, aliases) {
    var fileParts, pkg;
    if (aliases[file]) {
      return aliases[file];
    } else {
      fileParts = /^([^\/]*)(\/.*)$/.exec(file);
      pkg = aliases[fileParts != null ? fileParts[1] : void 0];
      if (pkg != null) {
        return pkg + fileParts[2];
      }
    }
    return null;
  };

  module.exports = transformTools.makeRequireTransform("aliasify", {
    jsFilesOnly: true,
    fromSourceFileDir: true
  }, function(args, opts, done) {
    var aliases, configDir, file, fileDir, ref, replacement, result, verbose;
    if (!opts.config) {
      return done(new Error("Could not find configuration for aliasify"));
    }
    aliases = opts.config.aliases;
    verbose = opts.config.verbose;
    configDir = ((ref = opts.configData) != null ? ref.configDir : void 0) || opts.config.configDir || process.cwd();
    result = null;
    file = args[0];
    if ((file != null) && (aliases != null)) {
      replacement = getReplacement(file, aliases);
      if (replacement != null) {
        if (replacement.relative != null) {
          replacement = replacement.relative;
        } else if (/^\./.test(replacement)) {
          replacement = path.resolve(configDir, replacement);
          fileDir = path.dirname(opts.file);
          replacement = "./" + (path.relative(fileDir, replacement));
        }
        if (verbose) {
          console.error("aliasify - " + opts.file + ": replacing " + args[0] + " with " + replacement);
        }
        if (/^[a-zA-Z]:\\/.test(replacement)) {
          replacement = replacement.replace(/\\/gi, "\\\\");
        } else {
          replacement = replacement.replace(/\\/gi, "/");
        }
        result = "require('" + replacement + "')";
      }
    }
    return done(null, result);
  });

}).call(this);
